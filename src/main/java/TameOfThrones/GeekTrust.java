/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TameOfThrones;

import java.util.List;
import java.io.IOException;
import java.io.File;
import java.io.InputStream;
import java.io.FileInputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;

import TameOfThrones.excahnges.GetFileResponse;
import TameOfThrones.models.Kingdom;
import TameOfThrones.models.Universe;
import TameOfThrones.utils.Helper;

public class GeekTrust {
    public static void main(String[] args) throws IOException{

        // TO RUN THE MAIN METHOD PROVIDE THE PATH OF THE INPUT FILE AS COMMAND LINE ARG AS
        // ./gradlew run --args='path/to/the/input/file'

        if (args.length == 0) {
            System.out.println("Please provide the path of the input file.");
            System.exit(0);
        }
        
        final String GOOD_RESPONSE = "GOOD";
        final String BAD_RESPONSE = "BAD";

        GetFileResponse fileResponse = Helper.resolveFileFromResources(args[0]);

        if (fileResponse.getResponse().equals(BAD_RESPONSE)) {
            System.out.println(fileResponse.getMessage());
            System.exit(0);
        } 

        
        List<Kingdom> kingdoms = getKingdoms(fileResponse.getFileContent());

        // IN THE CONTEXT OF THE PROBLEM SPACE IS THE ONLY POTENTIAL RULER. 
        // BUT FOR THE SAKE OF EXTENSIBILITY SOME OTHER KINGDOM CAN ALSO BECOME POTENTIAL RULER.
        // THE CODE WILL CHECK FOR THE POTENTIAL RULER(NOT SPACE EVERYTIME) AND IF IT HAS GOT THE REQUIRED SUPPORT TO BECOME A RULER
        

        Universe southeros = new Universe(kingdoms);

        Kingdom ruler = southeros.getRuler();

        if (ruler != null) {

            String supporters = "";
            for (Kingdom kingdom : ruler.getSupporteKingdoms()) {
                supporters = supporters + kingdom.getKingdomName() + " ";
            } 

            System.out.println(ruler.getKingdomName() + " " + supporters);
        } else {
            System.out.println("NONE");
        }
        
    }


    /**
     * THIS FUNCTION CREATES AND RETURNS A LIST OF KINGDOM OBJECTS FROM FILE fileCONTENT
     * @param fileContent FILE fileCONTENT AS STRING
     * @return LIST OF KINGDOMS
     */

    public static List<Kingdom> getKingdoms(String fileContent) {

        List<Kingdom> kingdoms = new ArrayList<Kingdom>();

        // CREATING A MAPPING KINGDOM -> EMBLEM
        HashMap<String, String> kingdomToEmblemMap = new HashMap<>();
        kingdomToEmblemMap.put("LAND", "PANDA");
        kingdomToEmblemMap.put("WATER", "OCTOPUS");
        kingdomToEmblemMap.put("AIR", "OWL");
        kingdomToEmblemMap.put("SPACE", "GORILLA");
        kingdomToEmblemMap.put("FIRE", "DRAGON");
        kingdomToEmblemMap.put("ICE", "MAMMOTH");
        

        // IF fileCONTENT OF THE FILE IS NOT EMPTY
        if (!fileContent.isEmpty()) {
            String[] entries = fileContent.split("\n");

            HashSet<String> register = new HashSet<>();

            // CREATING A LIST OF KINGDOMS FROM THE FILE fileCONTENT
            for (int i = 0; i < entries.length; i++) {
                
                String[] parts = entries[i].split(" ");

                String kingdomName = parts[0];
                String messageReceived = "";
                
                for (int index = 1; index < parts.length; index++) {
                    messageReceived = messageReceived + parts[index];
                }

                if (!register.contains(kingdomName)) {
                    kingdoms.add(new Kingdom(kingdomName, kingdomToEmblemMap.get(kingdomName), messageReceived, false));
                    register.add(kingdomName);
                }    
            }

        }

        // ADDING THE POTENTIAL RULER IN THE LIST OF KINGDOMS
        Kingdom potentialRuler = new Kingdom("SPACE", "GORILLA", "", true);
        kingdoms.add(potentialRuler);
        
        return kingdoms;
    
    }

}
